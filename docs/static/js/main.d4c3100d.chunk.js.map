{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Box1","style","width","this","props","bwidth","height","bheight","backgroundColor","concat","color1","react_default","a","createElement","className","Component","Box2","color2","FormCheckerboard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleColor1","e","setState","target","value","handleColor2","handleChange","number","state","boardwidth","rows","cols","drawCheckerboard","rowline","console","log","i","j","push","App_Box1","App_Box2","displaywidth","type","defaultValue","name","onChange","min","max","App","App_FormCheckerboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4c3100d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\n\nclass Box1 extends Component {\n  render(){\n    let style={width: this.props.bwidth, height: this.props.bheight, backgroundColor: `${this.props.color1}`};\n    return(\n      <div className=\"box1\" style={style}>\n      </div>\n    )\n  }\n}\nclass Box2 extends Component {\nrender(){\n  let style={width: this.props.bwidth, height: this.props.bheight, backgroundColor: `${this.props.color2}`};\n  return(\n    <div className=\"box2\" style={style}>\n    </div>\n    )\n  }\n}\nclass FormCheckerboard extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      rows: 2,\n      cols: 2,\n      bwidth: 500,\n      bheight: 500,\n      boardwidth: 1000,\n      color1: \"#ffffff\",\n      color2: \"#000000\",\n    };\n  }\n    render(){\n      let displaywidth=this.state.bwidth >> 0;\n      return(\n        <div className=\"container\">\n        <div className=\"slidecontainer\">\n          <form>\n          {/* <p>Board Width: {this.state.boardwidth} px</p>\n          <input type=\"range\" min=\"500\" max=\"1500\" defaultValue=\"500\" step=\"50\"onChange={this.handleChangeboard}/>\n          <br/> */}\n            Color 1: <input type=\"color\" defaultValue={this.state.color1} name=\"color1def\" onChange={this.handleColor1} /><span> </span>\n            Color 2: <input type=\"color\" defaultValue={this.state.color2} name=\"color2def\" onChange={this.handleColor2}/>\n            <p>Number of Rows/Cols: {this.state.rows} at {displaywidth} px/box</p>\n            <input type=\"range\" min=\"2\" max=\"250\" defaultValue=\"1\" onChange={this.handleChange}/>\n            <br/>\n            <br/>\n          </form>\n          \n          <div className=\"board\">\n            {this.drawCheckerboard()}\n          </div>\n          </div>\n        </div>\n      )\n    }\n  handleColor1=(e)=>{\n    this.setState({color1: e.target.value});\n  } \n  handleColor2=(e)=>{\n    this.setState({color2: e.target.value});\n\n  } \n  handleChange=(e)=>{\n    let number=e.target.value;\n    let bwidth=(this.state.boardwidth/number);\n    this.setState({bwidth: bwidth});\n    this.setState({bheight: bwidth});\n    this.setState({rows: number});\n    this.setState({cols: number});\n\n  }\n  drawCheckerboard=() =>{\n\n    let rowline=[];\n    console.log(this.state.boardwidth)\n      for (let i = 0; i<this.state.rows; i++){\n        for (let j = 0; j <this.state.cols; j++){\n          if(((i+j)%2+1)===1){\n            rowline.push(<Box1 bwidth={this.state.bwidth} bheight={this.state.bheight} color1={this.state.color1}/>);\n          }\n          else{\n            rowline.push(<Box2 bwidth={this.state.bwidth} bheight={this.state.bheight} color2={this.state.color2}/>);\n          }\n        }\n      }\n    return rowline;\n  }\n} \nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <h1>The Best Checkerboard Ever</h1>\n        <FormCheckerboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}